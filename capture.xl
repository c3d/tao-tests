// *****************************************************************************
// capture.xl                                                      Tao3D project
// *****************************************************************************
//
// File description:
//
//
//
//
//
//
//
//
//
//
// *****************************************************************************
// This software is licensed under the GNU General Public License v3
// (C) 2015,2019, Christophe de Dinechin <christophe@dinechin.org>
// (C) 2012-2014, Jérôme Forissier <jerome@taodyne.com>
// *****************************************************************************
// This file is part of Tao3D
//
// Tao3D is free software: you can r redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Tao3D is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Tao3D, in a file named COPYING.
// If not, see <https://www.gnu.org/licenses/>.
// *****************************************************************************

// Definitions to be used in the body of automatic tests
//
// Example:
//   tao -preload capture.xl <filename>.ddd
/*
capture_begin
capture_page "Rectangle",
    rectangle 0, 0, 200, 100
capture_page "Circle",
    circle 0, 0, 50
capture_end
*/


// Not set => default 2D
// checkerboard hintstereo hsplitstereo vsplitstereo
// alioscopy tridelity 2dplusdepth 2dplusdepth_declipse
DISPLAYMODE -> ""

// Not set => document directory
// Absolute or relative to document directory. Must exist or nothing is saved.
CAPTURE_DIR -> ""

// Group tests hierarchically
// Example:
// push_test_name "foo"
// push_test_name "bar"
// capture_page "baz", { ... }
// pop_test_name
// pop_test_name
// ... will create cap_foo_bar_baz.png
data name_stack
name_stack_top -> 0
name_prefix -> ""
push_test_name N:text ->
    name_stack_top := name_stack_top + 1
    name_stack[name_stack_top] := name_prefix & ""
    name_prefix := name_prefix & N & "_"

pop_test_name ->
    name_prefix := name_stack[name_stack_top]
    name_stack_top := name_stack_top - 1

capture_path T:text -> CAPTURE_DIR & T  & ".png"
capture PageName:text ->
    writeln "Capture: ", capture_path PageName
    status capture_path PageName
    screenshot capture_path PageName

capture_page T:text, Body ->
    page name_prefix & T,
        locally Body
        capture page_name
        next_page

// Set display mode and resolution
WindowW -> 800
WindowH -> 600
capture_begin ->
    page "Capture begin",
        locally
            window_size WindowW, WindowH
            DISPLAYMODE := env "DISPLAYMODE"
            if DISPLAYMODE <> "" then
                writeln "Display mode: ", DISPLAYMODE
                display_mode DISPLAYMODE

            CAPTURE_DIR := env "CAPTURE_DIR"
            if CAPTURE_DIR <> "" then
                CAPTURE_DIR := CAPTURE_DIR & "/"
            writeln "Begin"
            next_page

capture_end ->
    page "End",
        writeln "End"
        exit 0

color "default" -> color "black"
