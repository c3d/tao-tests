// Definitions to be used in the body of automatic tests
//
// Example:
//   tao -p capture.xl <filename>.ddd
/*
capture_begin
capture_page "Rectangle",
    rectangle 0, 0, 200, 100
capture_page "Circle",
    circle 0, 0, 50
capture_end
*/


// Get numeric value for Tao version (some tests depend on it)
import RegExp
TAO_VERSION -> 0.0
cached 0,
    if env "TAO_VERSION" != "" then
        TAO_VERSION := real env "TAO_VERSION"
    else
        regexp_parse_text tao_version,
            "^(\d\.\d+)" -> TAO_VERSION := real regexp_captured 1
    writeln "TAO_VERSION=", TAO_VERSION

// Not set => default 2D
// checkerboard hintstereo hsplitstereo vsplitstereo
// alioscopy tridelity 2dplusdepth 2dplusdepth_declipse
DISPLAYMODE -> env "DISPLAYMODE"

// Not set => document directory
// Absolute or relative to document directory. Must exist or nothing is saved.
CAPTURE_DIR -> env "CAPTURE_DIR"

// Group tests hierarchically
// Example:
// push_test_name "foo"
// push_test_name "bar"
// capture_page "baz", { ... }
// pop_test_name
// pop_test_name
// ... will create cap_foo_bar_baz.png
data NameStack
StackTop := 0
PAGE_PREFIX ->
    Ret -> ""
    Ret := ""
    for i in 1 .. StackTop loop
        Ret := Ret & NameStack[i] & "_"
    Ret
push_test_name N:text ->
    StackTop := StackTop + 1
    NameStack[StackTop] := N
    //writeln "push_test_name ", N, " => ", PAGE_PREFIX
pop_test_name ->
    StackTop := StackTop - 1
    //writeln "pop_test_name => ", PAGE_PREFIX

cap_dir -> if CAPTURE_DIR <> "" then CAPTURE_DIR & "/" else ""
cap_path T:text -> cap_dir & "cap_" & T  & ".png"
capture PageName ->
    writeln "Capture: ", cap_path PageName
    screenshot cap_path PageName

capture_page T:text, Body ->
    page PAGE_PREFIX & T,
        locally
            do Body
        capture page_name page_number 
        next_page

// Set display mode and resolution
WindowW -> 800
WindowH -> 600
capture_begin ->
    page "Capture begin",
        locally
            window_size WindowW, WindowH 
            if DISPLAYMODE <> "" then
                writeln "Display mode: ", DISPLAYMODE
                display_mode DISPLAYMODE
            writeln "Begin"
            next_page

next_page -> goto_page page_name (page_number + 1)

capture_end ->
    page "End",
        writeln "End"
        exit 0
